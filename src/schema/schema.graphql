scalar JSON
scalar JSONObject
scalar DateTime

type Asset {
  id: Int!
  companies: [Company]
  filename: String
  mimetype: String
  path: String
  sources: [Source]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Category {
  id: Int!
  jobs: [Job]
  name: String
  slug: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type City {
  id: Int!
  country: Country!
  jobs: [Job]
  name: String
}

type Tag {
  id: Int!
  name: String
}

type Company {
  id: Int!
  description: String
  jobs: [Job]
  logo: Int
  logoAsset: Asset
  meta: JSON
  name: String
  shortDescription: String
  slug: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Country {
  id: Int!
  cities: [City]
  name: String
}

type Job {
  id: Int!
  category: Category!
  city: City
  country: Country
  company: Company!
  description: String
  isClosed: Boolean
  tags: [Tag]
  level: String
  meta: JSON
  publishedAt: DateTime!
  salariesHistory: JSON
  salaryFrom: Int
  salaryTo: Int
  salaryFromMap: Boolean
  slug: String
  source: Source
  title: String
  type: String
  version: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Snapshot {
  id: Int!
  current: Boolean
  errors: JSON
  info: JSON
  processFinishedAt: DateTime
  processStartedAt: DateTime
  source: Source!
  version: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Source {
  id: Int!
  jobs: [Job]
  logo: Asset
  name: String
  slug: String
  snapshots: [Snapshot]
  url: String
}

type Query {
  jobs(
    limit: Int
    offset: Int
    title: String
    salaryFrom: Int
    salaryTo: Int
  ): [Job!]
  getJob(slug: String, id: ID): Job!
  categories(limit: Int, offset: Int): [Category!]
  companies(limit: Int, offset: Int): [Company!]
  cities(limit: Int, offset: Int): [City!]
}
